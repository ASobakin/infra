#!/usr/bin/env php
<?php

use Graph\Command\GetCommand;
use Graph\Command\QueryCommand;
use Scripter\Command\ScriptCommand;
use Scripter\Command\RunScriptCommand;
use Infra\Command\AnsibleExportInventoryCommand;
use Infra\Command\AnsibleImportInventoryCommand;
use Infra\Command\FirewallImportCommand;
use Infra\Command\FirewallInstallCommand;
use Infra\Command\FirewallShowCommand;
use Infra\Command\HostExecCommand;
use Infra\Command\HostListCommand;
use Infra\Command\SensuImportChecksCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Dotenv\Dotenv;
use CliHighlighter\Service\Highlighter;
use Graph\Graph;
use Infra\Infra;
use Scripter\Scripter;
use AutoTune\Tuner;

$loader = __DIR__ . '/../vendor/autoload.php';

if (!file_exists($loader)) {
    $loader = __DIR__ . '/../../../autoload.php';
}

if (!file_exists($loader)) {
    die(
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

$l = require $loader;

if (class_exists(Tuner::class)) {
    Tuner::init($l);
}

$filename = getcwd() . '/.env';
if (file_exists($filename)) {
    $dotenv = new Dotenv(true);
    $dotenv->load($filename);
}

$options = [
    'json' => [
        'keys'   => 'magenta',
        'values' => 'green',
        'braces' => 'light_white',
    ],

    'xml' => [
        'elements'   => 'yellow',
        'attributes' => 'green',
        'values'     => 'green',
        'innerText'  => 'light_white',
        'comments'   => 'gray',
        'meta'       => 'yellow',
    ],

    'yaml' => [
        'separators' => 'blue',
        'keys'       => 'green',
        'values'     => 'light_white',
        'comments'   => 'red',
    ],
];

$highlighter = new Highlighter($options);

$graph = new Graph();

$infra = new Infra($graph);


$configPath = getenv('INFRA_CONFIG');
if (!$configPath) {
    $configPath = __DIR__ . '/../example';
}
$loader = new \Graph\Loader\ResourceYamlLoader();
$loader->loadPath($graph, $configPath);
$infra->validate();



$scripter = new Scripter();
$scripter->loadScripts(__DIR__ . '/../scripts');
$scripter->loadScripts($configPath . '/scripts');



$application = new Application('Infra', '1.0.0');
$application->setCatchExceptions(true);
$application->add(new GetCommand($graph, $highlighter));
$application->add(new QueryCommand($graph));
$application->add(new ScriptCommand($scripter));
$application->add(new HostListCommand($infra));
$application->add(new HostExecCommand($infra));
$application->add(new FirewallShowCommand($infra));
$application->add(new FirewallInstallCommand($infra));
$application->add(new FirewallImportCommand($infra));
$application->add(new AnsibleImportInventoryCommand($infra));
$application->add(new AnsibleExportInventoryCommand($infra));
$application->add(new SensuImportChecksCommand($infra));



foreach ($scripter->getScripts() as $script) {
    try {
        $command = RunScriptCommand::fromScript($script);
        $application->add($command);
    } catch (Exception $e) {
        echo "Can't create " . $script->getName() . '. ' . $e->getMessage() . PHP_EOL;
        exit(-1);
    }
}

$application->run();
