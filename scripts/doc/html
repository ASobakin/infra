#!/usr/bin/env php
<?php

use Infra\Sdk\Utils;
use Infra\Service\HtmlGeneratorService;

$baseDir = __DIR__ . '/../../';
if (!file_exists($baseDir . 'composer.json')) {
  $baseDir = __DIR__ . '/../../../../../'; // run as a composer dependency
}
require_once $baseDir . 'vendor/autoload.php';

$args = Utils::getArguments(__FILE__);

$generator = new HtmlGeneratorService(
  $baseDir . 'public/'
);

$generator->checkDirectory();
$generator->deleteObsoleteFiles();
$generator->generateIndex();

echo "Hosts\n";
$hosts = getHosts();
$generator->generateHosts($hosts);

echo "HostGroups\n";
$hostGroups = getHostGroups();
$generator->generateHostGroups($hostGroups);

echo "Services\n";
$services = getServices();
$generator->generateServices($services);

echo "OsReleases\n";
$osReleases = getOsReleases();
$generator->generateOsReleases($osReleases);

echo "FirewallRules\n";
$firewallRules = getFirewallRules();
$generator->generateFirewallRules($firewallRules);

echo "Repositories\n";
$repositories = getRepositories();
$generator->generateRepositories($repositories);

echo "Users\n";
$users = getUsers();
$generator->generateUsers($users);

echo "DnsDomains\n";
$domains = getDnsDomains();
$generator->generateDnsDomains($domains);

echo "MonitoringChecks\n";
$monitoringChecks = getMonitoringChecks();
$generator->generateMonitoringChecks($monitoringChecks);

echo "DockerEngines\n";
$dockerEngines = getDockerEngines();
$generator->generateDockerEngines($dockerEngines);


function getHosts()
{
    $query = <<<GRAPHQL
query {
    hosts: allHosts {
        name
        labels {
          key
          value
        }
        osRelease {
            name
            displayName
        }
        fqdn
        publicIp
        privateIp
        status
        memberships: hostGroups {
            name
        }
        services {
          name
      }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['hosts'];
}

function getHostGroups()
{
    $query = <<<GRAPHQL
query {
    hostGroups: allHostGroups {
        name
        description
        labels {
          key
          value
        }
        parentHostGroup {
            name
        }
        members: hosts {
            name
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);
    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['hostGroups'];
}

function getOsReleases()
{
    $query = <<<GRAPHQL
query {
    osReleases: allOsReleases {
        name
        displayName
        labels {
          key
          value
        }
        hosts {
            name
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['osReleases'];
}

function getFirewallRules()
{
    $query = <<<GRAPHQL
query {
    firewallRules: allFirewallRules {
        name
        description
        template
        hosts {
            name
        }
        remoteHosts {
            name
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['firewallRules'];
}

function getRepositories()
{
    $query = <<<GRAPHQL
query {
    repositories: allGitRepositories {
        name
        description
        labels {
          key
          value
        }
        owner: repositoryOwnerName
        viewUrl
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['repositories'];
}

function getUsers()
{
    $query = <<<GRAPHQL
query {
    users: allUsers {
        name
        githubLink
        hasSshPublicKey
        sshPublicKey
        labels {
          key
          value
        }
        hosts {
            name
            publicIp
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['users'];
}

function getDnsDomains()
{
    $query = <<<GRAPHQL
query {
    domains: allDnsDomains {
        name
        labels {
          key
          value
        }
        dnsAccount
        dnsRecords {
            name
            type
            ttl
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['domains'];
}

function getMonitoringChecks()
{
    $query = <<<GRAPHQL
query {
    allMonitoringChecks {
        name
        labels {
          key
          value
        }
        command
        interval
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['allMonitoringChecks'];
}

function getDockerEngines()
{
    $query = <<<GRAPHQL
query {
    allDockerEngines {
        name
        address
        port
        labels {
          key
          value
        }
        apps {
            name
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['allDockerEngines'];
}


function getServices()
{
    $query = <<<GRAPHQL
query {
    allServices {
        name
        description
        labels {
          key
          value
        }
        hosts {
            name
        }
    }
}
GRAPHQL;

    $data = Utils::query($query);

    if (!empty($data['errors'][0])) {
        throw new RuntimeException($data['errors'][0]['message']);
    }

    return $data['data']['allServices'];
}
